name: Elixir CI

on:
  push:
    branches: [master]
    tags-ignore: ["v*"]
  pull_request:
    branches: [master]
  create:
    tags: ["v*"]
jobs:
  build:
    runs-on: ubuntu-latest
    name: OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}} / Ash ${{matrix.ash}}
    strategy:
      fail-fast: false
      matrix:
        otp: ["23", "22"]
        elixir: ["1.10.0"]
        ash: ["master", "1.12", "1.13"]
        pg_version: ["9.5", "9.6", "11"]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ASH_VERSION: ${{matrix.ash}}
    services:
      pg:
        image: postgres:${{ matrix.pg_version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5432:5432"]
    steps:
      - run: sudo apt-get install --yes erlang-dev
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: deps
          key: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2
      - uses: actions/cache@v1
        id: cache-build
        with:
          path: _build
          key: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-build-2-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-build-2
      - run: mix deps.get
      - run: MIX_ENV=test mix ecto.create
      - run: MIX_ENV=test mix ecto.migrate
      - run: mix check --except dialyzer
        if: startsWith(github.ref, 'refs/tags/v')
      - run: mix check
        if: "!startsWith(github.ref, 'refs/tags/v')"
  coverage:
    needs: [build]
    runs-on: ubuntu-latest
    name: Report Test Coverage
    strategy:
      matrix:
        otp: ["23"]
        elixir: ["1.10.0"]
        pg_version: ["11"]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    services:
      pg:
        image: postgres:${{ matrix.pg_version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5432:5432"]
    steps:
      - run: sudo apt-get install --yes erlang-dev
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: deps
          key: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2-
      - run: mix deps.get
      - run: MIX_ENV=test mix ecto.create
      - run: MIX_ENV=test mix ecto.migrate
      - run: mix coveralls.github
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    name: Release
    needs: [build]
    strategy:
      matrix:
        otp: ["23"]
        elixir: ["1.10.0"]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - run: sudo apt-get install --yes erlang-dev
      - uses: actions/checkout@v2
      - uses: actions/setup-elixir@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      - uses: actions/cache@v1
        id: cache-deps
        with:
          path: deps
          key: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: otp-${{matrix.otp}}-elixir-${{matrix.elixir}}-deps-2
      - run: mix deps.get
      - run: mix compile
      - run: mix hex.publish --yes
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
      - uses: olegtarasov/get-tag@v2
        id: tagName
      - uses: ethomson/send-tweet-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          status: |
            Alpha version "${{ steps.tagName.outputs.tag }}" of AshPostgres released!

            #myelixirstatus

            See the changelog for more info:
            https://github.com/ash-project/ash_postgres/blob/master/CHANGELOG.md
          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
