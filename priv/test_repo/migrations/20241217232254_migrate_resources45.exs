defmodule AshPostgres.TestRepo.Migrations.MigrateResources45 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:jokes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:text, :text)
      add(:is_good, :boolean, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:comedian_id, :uuid)
    end

    create table(:comedians, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:jokes) do
      modify(
        :comedian_id,
        references(:comedians,
          column: :id,
          name: "jokes_comedian_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:comedians) do
      add(:name, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end
  end

  def down do
    alter table(:comedians) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:name)
    end

    drop(constraint(:jokes, "jokes_comedian_id_fkey"))

    alter table(:jokes) do
      modify(:comedian_id, :uuid)
    end

    drop(table(:comedians))

    drop(table(:jokes))
  end
end
